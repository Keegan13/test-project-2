@model IndexViewModel
@inject IIdentityService identity;
@{
    ViewData["Title"] = "My chats";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string currUserId = identity.CurrentUserId;
    string selectedId = ViewBag.SelectedId as string;
    if (String.IsNullOrEmpty(selectedId))
    {
        selectedId = Model.Rooms.FirstOrDefault()?.Id ?? "";
        ViewBag.SelectedId = selectedId;
    }
}

<div class="row" id="chat-container">
    <div class="col-md-4">
        <div>
            <nav class="chats-tabs">

                <input class="form-control" type="search" id="search-input" autocomplete="off" />
                <div class="chat-tab-links scrollable">
                    <div class="nav nav-tabs nav-fill" id="nav-tab" role="tablist">
                        @foreach (var item in Model.Rooms)
                        {
                            <a class="nav-item nav-link w-100 chat-tab-link @(item.Id==selectedId?"active":"") @(item.HasUnread?"updated":"")" id="chat@(item.Id)-tab" data-toggle="tab" href="#chat@(item.Id)" role="tab" aria-controls="chat@(item.Id)" aria-selected="@(item.Id==selectedId?"true":"false")">
                                <i class="fa @(item.IsPrivate?"fa fa-user":"fa fa-users")"></i>
                                @item.RoomName
                            </a>
                        }

                        <form data-ajax="true" data-ajax-success="onLoadChats" method="post" data-ajax-url="/chat/rooms" id="more-chats-form">
                            <input type="hidden" name="tailId" value="@(Model.Rooms.LastOrDefault()?.Id)" />
                            <button type="submit" class="btn" style="margin: auto;font-size: small;width: 100%;">Load More</button>
                        </form>
                    </div>
                </div>
            </nav>
        </div>
    </div>
    <div class="col-md-8">
        <div class="mb-3 mt-2">
            <h4 class="chat-heading d-inline-block align-middle" id="chat-heading"></h4>
            <form id="invite-form">
                <button type="submit"
                        class="btn btn-primary btn-invite d-inline-block align-middle float-right">
                    <i class="fa fa-plus-circle"></i>
                </button>
            </form>
        </div>

        <div class="tab-content" id="nav-tabContent">
            @foreach (var item in Model.Rooms)
            {
                <partial name="_chatTab" model="item" />
            }
        </div>

        <form id="send-form" class="mt-2">
            <div class="input-group">
                <textarea class="form-control message-input" name="text" value="" placeholder="Type a message" required style="border-radius:10px;resize:none;"></textarea>
                <button type="submit" class="btn">
                    <i class="fa fa-telegram" style="font-size:36px;color:cornflowerblue"></i>
                </button>
            </div>
        </form>

    </div>
</div>

<div id="hidden"></div>

@section Scripts{
    <script>
        (function ($) {
            $('#search-input').appSearch({
                onUser: function (id) { alert("Starting chat with user " + id) },
                onChat: function (id) { alert("Starting chat with id" + id) }
            });
            const config = $('#chat-container').chat({
                tabSelector: "#nav-tab",
                currentUserId: "@identity.CurrentUserId",
                messageContainerSelector:"#nav-tabContent"
            });

            window.config = config;
        })(jQuery)

    </script>
    <script>
        (function ($) {

            let _userJoinAlert = function (userJoin) {
                alert(`User ${userJoin.user.userName} has joined to chat room ${userJoin.chatName}`);
            };

            let _onMessageHandler = function (msg) {
                if (msg == null || msg == "" || msg == undefined) {
                    return;
                }
                appenMessage(msg);
            };

            let _onNewChatHandler = function (chat) {
                if (chat == null || chat == "" || chat == undefined) {
                    return;
                }
                appendChat(chat);
            };

            let _onChatJoinHandler = function (user) {
                if (user == null || user == "" || user == undefined) {
                    return;
                }
                _userJoinAlert(user);
            };

            const config = {
                host: "/Hub",
                onMessage: _onMessageHandler,
                onNewChat: _onNewChatHandler,
                onChatJoin:_onChatJoinHandler,
                mode: "null"
            };
            $("#hidden").hub(config);
            $.currentUserId = "@identity.CurrentUserId";


            $(document).on('keypress', 'form textarea', function (e) {
                if (e.which == 13 && !e.shiftKey && this.value && this.value.trim().length>0) {
                    e.preventDefault();
                    e.stopPropagation();
                    $(this).submit();
                }
                else {
                    e.shiftKey = false;
                }
            });

        })(jQuery)

    </script>
}
